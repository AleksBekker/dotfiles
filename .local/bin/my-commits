#!/bin/sh

help() {
  echo "Usage: $0 [OPTIONS]"
  echo "  -h         Display this help."
  echo "  -e <email> The email associated with commits. Defaults to 'user.email' from your git configuration."
  echo "  -c         Check if the links are valid."
  echo "  -d <dir>   Directory of the git repository. Defaults to the current directory."
  echo "  -s <since> Date since. Defaults to the beginning of time itself (1970-01-01)."
}
dir=$(pwd)
since="1970-01-01"

while getopts 'd:e:s:ch' opt; do
  case $opt in
    c) check=true ;;
    d) dir=$OPTARG ;;
    e) email=$OPTARG ;;
    h) help; exit 0 ;;
    s) since=$OPTARG ;;
  esac
done

warn() {
  echo "WARNING: $1" >&2
}

error() {
  echo "ERROR:   $1" >&2
  exit 1
}

if [ -z "$email" ]; then
  warn "Email not provided. Attempting to use 'user.email'"
  email=$(git -C "$dir" config user.email)
fi

if [ -z "$email" ]; then
  error "Email not found in git configuration either. Please provide it with -e."
fi

if [ ! -d "$dir/.git" ]; then
  error "Not a git repository. Please run this script in a git repository, or specify the directory with -d."
fi

url=$(
  git -C "$dir" remote get-url origin | sed '
    s|^git@|https://|;
    s|^https://github.com:|https://github.com/|;
    s|\.git$||;
    s|/$||
    s|$|/commit/|
  '
)

links=$(git -C "$dir" log --author="$email" --since="$since" --all \
  | sed -n '/^commit /{s|^commit |'"$url"'|;p}'
)

cd $backdir  # Return to the original directory ASAP in case of failures

if [ ! "$check" = true ]; then
  warn "The following links have not been checked for validity. Use -c to check."
  echo "$links"
  exit 0
fi

for link in $links; do
  if curl -s --head $link | head -n 1 | grep -q '200'; then
    echo $link
  else
    warn "Invalid link: $link" >&2
  fi
done
